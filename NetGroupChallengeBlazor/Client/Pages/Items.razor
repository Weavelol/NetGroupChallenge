@page "/items"

@using Microsoft.AspNetCore.Authorization
@using DTOModels
@using NetGroupChallengeBlazor.Client.Components
@using BlazorClientServices.Interfaces
@using Microsoft.AspNetCore.WebUtilities
@using Filters

@attribute [Authorize(Roles = "User, Admin")]
@inject NavigationManager NavManager
@inject IApiService apiService

@if (FiltersDialogOpen) {
    <DialogComponent Title="Update" OnClose="@OnFiltersDialogClose">
        <ItemsSearchComponent ItemFilter="@filter"/>
    </DialogComponent>
}

<button type="button" class="btn" @onclick="() => OpenFiltersDialog()">Add Filters</button>
<ItemsListComponent Items="@ItemsList" OnUpdateCallback="@UpdateItemsAsync">

</ItemsListComponent>

@code {
    [Parameter, SupplyParameterFromQuery]
    public string Title { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public string SerialNumber { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public string StorageTitle { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public string Classification { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public string ItemOwner { get; set; } = string.Empty;
    [Parameter, SupplyParameterFromQuery]
    public double? Weight { get; set; } = null;
    [Parameter, SupplyParameterFromQuery]
    public double? Length { get; set; } = null;
    [Parameter, SupplyParameterFromQuery]
    public double? Width { get; set; } = null;
    [Parameter, SupplyParameterFromQuery]
    public double? Height { get; set; } = null;


    private Dictionary<string, string?> queryParams = new Dictionary<string, string?>();
    private List<ItemDTO> ItemsList = new List<ItemDTO>();
    private string apiQuery = string.Empty;



    public ItemFilter filter { get; set; } = new ItemFilter();

    protected override async Task OnInitializedAsync() {
        filter.Title = Title;
        filter.SerialNumber = SerialNumber;
        filter.StorageTitle = StorageTitle;
        filter.Classification = Classification;
        filter.ItemOwner = ItemOwner;
        filter.Weight = Weight;
        filter.Length = Length;
        filter.Width = Width;
        filter.Height = Height;


        await UpdateItemsAsync();
    }

    private async Task UpdateItemsAsync() {
        apiQuery = ApplyFilters();
        ItemsList = await apiService.GetItemsAsync($"api/{apiQuery}");
    }

    private async Task UpdateFiltersAsync() {
        await UpdateItemsAsync();
    }



    private string ApplyFilters() {
        AddToQueryDictionary("Title", filter.Title);
        AddToQueryDictionary("SerialNumber", filter.SerialNumber);
        AddToQueryDictionary("StorageTitle", filter.StorageTitle);
        AddToQueryDictionary("Classification", filter.Classification);
        AddToQueryDictionary("ItemOwner", filter.ItemOwner);
        AddToQueryDictionary("Weight", filter.Weight.ToString());
        AddToQueryDictionary("Length", filter.Length.ToString());
        AddToQueryDictionary("Width", filter.Width.ToString());
        AddToQueryDictionary("Height", filter.Height.ToString());
        var query = QueryHelpers.AddQueryString("items", queryParams);
        NavManager.NavigateTo($"{NavManager.BaseUri}{query}");
        return query;
    }

    private void AddToQueryDictionary(string key, string? value) {
        if (value is not null && value != string.Empty) {
            if(queryParams.TryGetValue(key, out var val)) {
                queryParams[key] = value;
            } 
            else {
                queryParams.Add(key, value);
            }
        } else {
            if(queryParams.TryGetValue(key, out var val)) {
                queryParams.Remove(key);
            } 
        }   
    }


    private bool FiltersDialogOpen { get; set; }
    private void OpenFiltersDialog() {
        FiltersDialogOpen = true;
        StateHasChanged();
    }
    private async Task OnFiltersDialogClose(bool accepted) {
        FiltersDialogOpen = false;
        if (accepted) {
            await UpdateFiltersAsync();
        }
        StateHasChanged();
    }
}
