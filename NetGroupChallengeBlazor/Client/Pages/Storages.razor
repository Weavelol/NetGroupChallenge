@page "/storages"
@using Core.Models
@using NetGroupChallengeBlazor.Client.Components
@using Microsoft.AspNetCore.Authorization 
@using BlazorClientServices.Interfaces
@attribute [Authorize(Roles = "User, Admin")]
@inject IApiService apiService


@if (CreateDialogOpen) {
    <DialogComponent Title="Create" OnClose="@OnCreateDialogClose">
        <StorageFormComponent Storage="@newStorage" />
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Delete" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}

<div class="container">
    <h3 class="p-3 text-center">@CurrentStorage.StoragePath</h3>
    <button type="button" class="btn" @onclick="() => SelectPreviousStorage()">Back</button>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th><button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var storage in nestedStorages)
            {
                <tr>
                    <td>
                        <button type="button" class="btn" @onclick="() => SelectNextStorage(storage)">@storage.Title</button>
                    </td>
                    <td>
                        <button type="button" class="btn" @onclick="() => OpenDeleteDialog(storage)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter]
    public Storage CurrentStorage { get; set; } = new Storage();


    private List<Storage> nestedStorages = new List<Storage>();
    private List<Item> nestedItems = new List<Item>();
    private Storage newStorage;
    private Storage deleteStorage;

    protected override async Task OnInitializedAsync() {
        await UpdateStorages();
    }


    private bool DeleteDialogOpen { get; set; }
    private void OpenDeleteDialog(Storage storage) {
        DeleteDialogOpen = true;
        deleteStorage = storage;
        StateHasChanged();
    }
    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;
        if (accepted) {
            await apiService.DeleteAsync($"api/storages/{deleteStorage.Id}");
            await UpdateStorages();
            StateHasChanged();
        }
    }


    private bool CreateDialogOpen { get; set; }
    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        newStorage = new Storage();
        if(CurrentStorage.Id != Guid.Empty) {
            newStorage.ParentStorage = CurrentStorage;
            newStorage.ParentStorageId = CurrentStorage.Id;
        }
        StateHasChanged();
    }
    private async Task OnCreateDialogClose(bool accepted) {
        CreateDialogOpen = false;
        if (accepted) {
            await apiService.PostStorageAsync("api/storages", newStorage);
            await UpdateStorages();
            StateHasChanged();
        }
    }

    private async Task SelectNextStorage(Storage storage) {
        await UpdateCurrentStorage(storage);
    }
    private async Task SelectPreviousStorage() {
        var storage = new Storage();
        if(CurrentStorage.ParentStorageId is not null) {
            storage = await apiService.GetStorageAsync($"api/storages/{CurrentStorage.ParentStorageId}");
        } 
        await UpdateCurrentStorage(storage);
    }

    private async Task UpdateCurrentStorage(Storage storage) {
        CurrentStorage = storage;
        await UpdateStorages();
    }

    private async Task UpdateStorages() {
        var storages = await apiService.GetStorageAsync($"api/storages/{CurrentStorage.Id}");
        nestedStorages = storages.NestedStorages;
    }
}
