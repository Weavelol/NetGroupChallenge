@page "/storages"
@using Core.Models
@using NetGroupChallengeBlazor.Client.Components
@using Microsoft.AspNetCore.Authorization 
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Text.Json;
@using System;
@using System.Threading.Tasks;
@using System.Text
@using System.Net.Mime
@using System.Text.Json.Serialization
@attribute [Authorize(Roles = "User, Admin")]
@inject HttpClient Http


@if (CreateDialogOpen) {
    <DialogComponent Title="Create" OnClose="@OnCreateDialogClose">
        <StorageFormComponent Storage="@newStorage" />
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Delete" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}

<div class="container">
    <h3 class="p-3 text-center">@CurrentStorage.StoragePath</h3>
    <button type="button" class="btn" @onclick="() => SelectPreviousStorage()">Back</button>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th><button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var storage in nestedStorages)
            {
                <tr>
                    <td>
                        <button type="button" class="btn" @onclick="() => SelectNextStorage(storage)">@storage.Title</button>
                    </td>
                    <td>
                        <button type="button" class="btn" @onclick="() => OpenDeleteDialog(storage)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter]
    public Storage CurrentStorage { get; set; } = new Storage {
        Id = Guid.Empty,

    };


    private List<Storage> nestedStorages = new List<Storage>();
    private List<Item> nestedItems = new List<Item>();
    private Storage newStorage;
    private Storage deleteStorage;

    protected override async Task OnInitializedAsync() {
        await UpdateStorages();
    }

    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(Storage storage) {
        DeleteDialogOpen = true;
        deleteStorage = storage;
        StateHasChanged();
    }
    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;
        if (accepted) {
            await Http.DeleteAsync($"api/storages/{deleteStorage.Id}");
        }
        await UpdateStorages();
        StateHasChanged();
    }


    public bool CreateDialogOpen { get; set; }

    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        newStorage = new Storage {
                ParentStorageId = CurrentStorage.Id,
                Id = Guid.Empty,
                OwnerId = Guid.Empty.ToString(),
                StoragePath = string.Empty,
                NestedStorages = new List<Storage>()
    };
        StateHasChanged();
    }
    private async Task OnCreateDialogClose(bool accepted) {
        CreateDialogOpen = false;
        if (accepted) {
            try {
                var x = await Http.PostAsJsonAsync<Storage>("api/storages", newStorage);

            }
            catch(Exception ex) {
                Console.Write(ex.Message);
            }
        }
        await UpdateStorages();
        StateHasChanged();
    }

    private async Task SelectPreviousStorage() {
        if(CurrentStorage.ParentStorageId is null) {
            var storage = new Storage {
                Id = Guid.Empty,
                Title = string.Empty,
            };
            await UpdateCurrentStorage(storage);
        } else {
            var storage = await Http.GetFromJsonAsync<Storage>($"api/storages/{CurrentStorage.ParentStorageId}");
            await UpdateCurrentStorage(storage);
        }
    }

    private async Task SelectNextStorage(Storage storage) {
        await UpdateCurrentStorage(storage);
    }

    private async Task UpdateCurrentStorage(Storage storage) {
        CurrentStorage = storage;
        await UpdateStorages();
    }

    private async Task UpdateStorages() {
        try {
            var storages = await Http.GetFromJsonAsync<Storage>($"api/storages/{CurrentStorage.Id}");
             
             if(storages is not null) {
                 nestedStorages = storages.NestedStorages;
             }
        } catch (AccessTokenNotAvailableException exception) {
            exception.Redirect();
        } catch (Exception ex) {
            Console.WriteLine(ex.Message);
        }
    }
}
