@using DTOModels
@using BlazorClientServices.Interfaces
@inject IApiService apiService

@if (CreateDialogOpen) {
    <DialogComponent Title="Create" OnClose="@OnCreateDialogClose">
        <ItemFormComponent Item="@newItem" />
    </DialogComponent>
}

@if (UpdateDialogOpen) {
    <DialogComponent Title="Update" OnClose="@OnUpdateDialogClose">
        <ItemFormComponent Item=@newItem/>
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Delete" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}


<div class="container">
    <a></a>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Image</th>
                <th>Title</th>
                <th>Storage</th>
                <th>Owner</th>
                <th>Classification</th>
                <th>Serial Number</th>
                <th>Weight</th>
                <th>Length</th>
                <th>Width</th>
                <th>Height</th>
                <th><button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    <td>
                        <img src="@CreateImage(item.Image)" width="150" height="100"/>
                    </td>
                    <td>@item.Title</td>
                    <td>@item.ParentStorage.StoragePath</td>
                    <td>@item.ItemOwner</td>
                    <td>@item.Classification</td>
                    <td>@item.SerialNumber</td>
                    <td>@item.Weight</td>
                    <td>@item.Length</td>
                    <td>@item.Width</td>
                    <td>@item.Height</td>
                    <td>
                        <button type="button" class="btn" @onclick="() => OpenUpdateDialog(item)">Edit</button>
                        <button type="button" class="btn" @onclick="() => OpenDeleteDialog(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public List<ItemDTO> Items { get; set; } = new List<ItemDTO>();
    [Parameter]
    public EventCallback OnUpdateCallback { get; set; }

    private ItemDTO currentItem = new ItemDTO();
    private ItemCreateDTO newItem = new ItemCreateDTO();
    private Guid updatingId;

    private bool DeleteDialogOpen { get; set; }
    private void OpenDeleteDialog(ItemDTO item) {
        DeleteDialogOpen = true;
        currentItem = item;
        StateHasChanged();
    }
    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;
        if (accepted) {
            await apiService.DeleteAsync($"api/items/{currentItem.Id}");
            await OnUpdateCallback.InvokeAsync();
            StateHasChanged();
        }
    }

    private bool CreateDialogOpen { get; set; }
    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        newItem = new ItemCreateDTO();
        StateHasChanged();
    }
    private async Task OnCreateDialogClose(bool accepted) {
        CreateDialogOpen = false;
        if (accepted) {
            await apiService.PostItemAsync("api/items", newItem);
            await OnUpdateCallback.InvokeAsync();
            newItem = new ItemCreateDTO();
            StateHasChanged();
        }
    }

    private bool UpdateDialogOpen { get; set; }
    private void OpenUpdateDialog(ItemDTO item) {
        updatingId = item.Id;
        newItem = new ItemCreateDTO {
                Title = item.Title,
                StorageId = item.StorageId,
                ImageId = item.ImageId,
                Image = item.Image,
                SerialNumber = item.SerialNumber,
                Classification = item.Classification,
                ItemOwner = item.ItemOwner,
                Weight = item.Weight,
                Length = item.Length,
                Width = item.Width,
                Height = item.Height
            };
        UpdateDialogOpen = true;
        StateHasChanged();
    }
    private async Task OnUpdateDialogClose(bool accepted) {
        UpdateDialogOpen = false;
        if (accepted) {
            await apiService.PutItemAsync($"api/items/{updatingId}", newItem);
            await OnUpdateCallback.InvokeAsync();
            newItem = new ItemCreateDTO();
            StateHasChanged();
        }
    }

    private string CreateImage(ImageDTO image) {
        string imageBase64Data = Convert.ToBase64String(image.ImageData);
        string imageDataURL = string.Format("data:image/jpg;base64,{0}", imageBase64Data);
        return imageDataURL;
    }
}
