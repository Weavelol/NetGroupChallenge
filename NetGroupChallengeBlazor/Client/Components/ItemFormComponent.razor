@using DTOModels
@using NetGroupChallengeBlazor.Client.Components.FormComponents

<EditForm Model="@Item">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputBoxComponent PropertyName="Title">
        <InputText @bind-Value=Item.Title class="form-control" id="Title" />
    </InputBoxComponent>

    <StorageSelectComponent Item="@Item"/>

    <InputBoxComponent PropertyName="Image">
        <InputFile OnChange="@LoadFiles" class=form-control id="Image"/>
    </InputBoxComponent>

    <InputBoxComponent PropertyName="SerialNumber">
        <InputText @bind-Value=Item.SerialNumber class="form-control" id="SerialNumber" />
    </InputBoxComponent>

    <InputBoxComponent PropertyName="Classification">
        <InputText @bind-Value=Item.Classification class="form-control" id="Classification" />
    </InputBoxComponent>

    <InputBoxComponent PropertyName="Item Owner">
        <InputText @bind-Value=Item.ItemOwner class="form-control" id="ItemOwner" />
    </InputBoxComponent>

    <InputBoxComponent PropertyName="Weight">
        <InputNumber @bind-Value="Item.Weight" class="form-control" id="Weight" />
    </InputBoxComponent>
    
    <InputBoxComponent PropertyName="Length">
        <InputNumber @bind-Value="Item.Length" class="form-control" id="Length" />
    </InputBoxComponent>

    <InputBoxComponent PropertyName="Width">
        <InputNumber @bind-Value="Item.Width" class="form-control" id="Width" />
    </InputBoxComponent>

    <InputBoxComponent PropertyName="Height">
        <InputNumber @bind-Value="Item.Height" class="form-control" id="Height" />
    </InputBoxComponent>
</EditForm>


@code {
    [Parameter]
    public ItemCreateDTO Item{ get; set; }

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        var image = new ImageDTO();
        image.Title = e.File.Name;
        if(Item.Image != null && Item.Image.Id != Guid.Empty) {
            image.Id = Item.Image.Id;
        }

        MemoryStream ms = new MemoryStream();
        using var stream = e.File.OpenReadStream();
        await stream.CopyToAsync(ms);
        image.ImageData = ms.ToArray();
        ms.Close();
        ms.Dispose();
        Item.Image = image;
    }
}
