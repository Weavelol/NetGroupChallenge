@using DTOModels
@using BlazorClientServices.Interfaces
@inject IApiService apiService

@if (UpdateDialogOpen) {
    <DialogComponent Title="Update" OnClose="@OnUpdateDialogClose">
        <ItemFormComponent Item=@newItem/>
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Delete" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}





@code {
    [Parameter]
    public ItemDTO Item { get; set; } = new ItemDTO();
    [Parameter]
    public EventCallback OnUpdateCallback { get; set; }

    private ItemDTO currentItem = new ItemDTO();
    private ItemCreateDTO newItem = new ItemCreateDTO();
    private Guid updatingId;

    private bool DeleteDialogOpen { get; set; }
    private void OpenDeleteDialog(ItemDTO item) {
        DeleteDialogOpen = true;
        currentItem = item;
        StateHasChanged();
    }
    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;
        if (accepted) {
            await apiService.DeleteAsync($"api/items/{currentItem.Id}");
            await OnUpdateCallback.InvokeAsync();
            StateHasChanged();
        }
    }

    private bool UpdateDialogOpen { get; set; }
    private void OpenUpdateDialog(ItemDTO item) {
        updatingId = item.Id;
        newItem = new ItemCreateDTO {
                Title = item.Title,
                StorageId = item.StorageId,
                ImageId = item.ImageId,
                Image = item.Image,
                SerialNumber = item.SerialNumber,
                Classification = item.Classification,
                ItemOwner = item.ItemOwner,
                Weight = item.Weight,
                Length = item.Length,
                Width = item.Width,
                Height = item.Height
            };
        UpdateDialogOpen = true;
        StateHasChanged();
    }
    private async Task OnUpdateDialogClose(bool accepted) {
        UpdateDialogOpen = false;
        if (accepted) {
            await apiService.PutItemAsync($"api/items/{updatingId}", newItem);
            await OnUpdateCallback.InvokeAsync();
            newItem = new ItemCreateDTO();
            StateHasChanged();
        }
    }
}
