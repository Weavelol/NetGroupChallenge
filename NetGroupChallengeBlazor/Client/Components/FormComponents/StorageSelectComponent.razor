@using DTOModels
@using ClientServices.Interfaces
@inject IApiService apiService

<div class="form-group row">
    <label for="Storage" class="col-sm-4 col-form-label">Storage</label>
    <div class="col-sm-8">
        <InputSelect @bind-Value="StorageId" class="form-control" id="Storage">
            @foreach (var storage in storages) {
                <option value="@storage.Id">@storage.StoragePath</option>
            }
        </InputSelect>
    </div>
</div>

@code {
    [Parameter]
    public ItemCreateDTO Item { get; set; }

    private Dictionary<Guid, StorageDTO> storagesDict = new Dictionary<Guid, StorageDTO>();
    private List<StorageDTO> storages = new List<StorageDTO>();
    private Guid StorageId {
        get { return Item.StorageId; }
        set {
            if (storagesDict.TryGetValue(value, out var storage)) {
                Item.StorageId = value;
            }
        }
    }

    protected override async Task OnInitializedAsync() {
        storages = await apiService.GetEntitiesAsync<StorageDTO>($"api/storages");

        foreach(var st in storages) {
            storagesDict.Add(st.Id, st);
        }
        SetDefaultStorage();
    }

    private void SetDefaultStorage() {
        if(Item.StorageId == Guid.Empty) {
            Item.StorageId = storages.FirstOrDefault().Id;
        }
        StorageId = Item.StorageId;
    }
}
